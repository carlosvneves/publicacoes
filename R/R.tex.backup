\documentclass[a4paper,11pt]{article}

%-----------------------------------------------------------------------------
% Pacotes Necessários
%-----------------------------------------------------------------------------

\usepackage[brazilian]{babel} % padronizar a linguagem
\usepackage[utf8]{inputenc} % permitir a acentuação
\usepackage[protrusion=true,expansion=true]{microtype} % obter melhor tipografia
\usepackage[svgnames]{xcolor} % habitar cores para 'svgnames'
\usepackage[hang, small,labelfont=bf,up,textfont=it,up]{caption} % customizar captions acima/abaixo de tabelas ou figuras
\usepackage{color}    % definir cores
\usepackage{graphicx} % adicionar imagens
\usepackage{fix-cm}   % customizar o tamanho das fontes
\usepackage{sectsty}  % habilitar a customização dos títulos das seções
\usepackage{fancyhdr} % definir cabeçalhos e rodapés
\usepackage{listings} % listagens
\usepackage[ddmmyyyy]{datetime} % mostrar a data
\usepackage{lipsum} % gerar um texto randomico (será tirado ao final)
\usepackage{titling} % Permite a configuração do título
\usepackage{url} % codigo para as URLs
\usepackage[a4paper, inner=1.5cm, outer=3cm, top=2cm, bottom=3cm, 
bindingoffset=1cm]{geometry}
%-----------------------------------------------------------------------------
% Definições Iniciais
%-----------------------------------------------------------------------------

% modificar toda a fonte de todas as seções
\allsectionsfont{\usefont{OT1}{phv}{b}{n}}
% habilitar a customização de cabeçalhos e rodapés
\pagestyle{fancy} 

\addto\captionsenglish{ % modificar os nomes do ingles
  \renewcommand{\abstractname}{Resumo}
  \renewcommand{\bibname}{Consulte também...}
  \renewcommand{\contentsname}{Sumário}
  \renewcommand{\listfigurename}{Figuras}
  \renewcommand{\lstlistingname}{Listagem}
  \renewcommand{\lstlistlistingname}{Listagens}
  \renewcommand{\refname}{Referências}
}

\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{backcolour}{rgb}{0.95,0.95,0.92}

% Definição para as caixas de listagens
\lstset {
 aboveskip=3mm,
 backgroundcolor=\color{backcolour},
 basicstyle={\small\ttfamily},
 belowskip=3mm,
 breaklines=true,
 breakatwhitespace=true,
 columns=flexible,
 commentstyle=\textit,
 frame=tb,
 keepspaces=true,
 keywordstyle=\color{blue}\bfseries,
 % language=Java, Python, HTML, CSS
 numbers=left,
 numbersep=5pt,
 numberstyle=\tiny\color{codegray},
 showstringspaces=false,
 showtabs=false,
 tabsize=3
}

% Cabeçalhos - limpar tudo
\lhead{}
\chead{}
\rhead{}

% Rodapés
\lfoot{\tiny R}
\cfoot{\tiny Versão 1.01}
\rfoot{\tiny Folha \thepage\ }

\renewcommand{\headrulewidth}{0.0pt} % No header rule
\renewcommand{\footrulewidth}{0.4pt} % Thin footer rule

\usepackage{lettrine} % Package to accentuate the first letter of the text
\newcommand{\initial}[1]{ % Defines the command and style for the first letter
  \lettrine[lines=3,lhang=0.3,nindent=0em]{
    \color{DarkGoldenrod}
    {\textsf{#1}}
  }{}
}

%-----------------------------------------------------------------------------
% TÍTULO DO DOCUMENTO
%-----------------------------------------------------------------------------

% comando para as barras
\newcommand{\HorRule}{\color{DarkGoldenrod} \rule{\linewidth}{1pt}} 

% barra horizontal superior
\pretitle{\vspace{-90pt} \begin{flushleft} \HorRule \fontsize{50}{50} 
\usefont{OT1}{phv}{b}{n} \color{DarkRed} \selectfont}

% título do documento
\title{R}
\posttitle{\par\end{flushleft}\vskip 0.1em} % espaço abaixo do título

% autor do documento
\preauthor{\begin{flushleft}\large \lineskip 0.1em \usefont{OT1}{phv}{b}{sl} 
\color{DarkRed}} % fonte do autor
\author{Fernando Anselmo}
\postauthor{\footnotesize \usefont{OT1}{phv}{m}{sl} \color{Black} \\
 \url{http://fernandoanselmo.orgfree.com/wordpress/} % endereço

\par\end{flushleft}\HorRule} % barra horizontal inferior

\date{Versão 1.01 em \today} % mostrar a data do artigo 

%-----------------------------------------------------------------------------
% INÍCIO DO DOCUMENTO
%-----------------------------------------------------------------------------

\begin{document}
\maketitle % mostrar o título
\thispagestyle{fancy} % habilitar o cabeçalho/rodapé das páginas

%-----------------------------------------------------------------------------
% RESUMO DO ARTIGO
%-----------------------------------------------------------------------------

\begin{abstract}
  % O primeiro caractere deve vir com \initial{}
\initial{R}\textbf{ é uma linguagem bem como um ambiente de desenvolvimento 
integrado para cálculos estatísticos e gráficos disponibilizada de forma Open 
Source. Foi criada originalmente por Ross Ihaka e por Robert Gentleman no 
departamento de Estatística da universidade de Auckland, Nova Zelândia, e 
desenvolvida em um esforço colaborativo de pessoas em vários locais do mundo. O 
código fonte é escrito principalmente em C, Fortran e R. As capacidades da R são 
estendidas através de pacotes criados pela sua comunidade ativa, um famoso 
repositório pode ser encontrado na CRAN\cite{cranoficial} (Comprehensive R 
Archive Network) com uma vasta gama de aplicações, abrangendo as áreas de 
finanças, genética, aprendizagem de máquinas, medicina, ciências sociais e 
estatísticas espaciais. A linguagem está se tornando padrão porque os processos 
de mineração de dados vivem uma era dourada, quer estejam em uso para determinar 
preços de publicidade, descobrir novos medicamentos ou fazer a sintonia fina de 
modelos financeiros.}
\end{abstract}
\vspace{20pt}

%--------------------------------------------------------------------------- --
% CONTEÚDO DO ARTIGO
%-----------------------------------------------------------------------------
\section{Parte inicial}
A R apareceu inicialmente em 1996, e surgiu de uma necessidade de seus 
criadores, Robert Gentleman e Ross Ihaka quando estavam iniciando suas carreiras 
como professores na universidade de Auckland. Na universidade, existia um 
laboratório de estatística com vários computadores, mas grande parte dos 
softwares disponíveis na época eram pagos. Para a maioria dos alunos que eles 
ensinavam, após esses saírem da universidade, dificilmente teriam acesso as 
licenças desses softwares pois não possuiam condições financeiras. Isso se 
mostrava ainda pior com os alunos estrangeiros, já que muitos países sequer 
tinham representantes comerciais para vender tais softwares. \\[2mm]
Nessa época, tiveram acesso ao livro ``New S language'' (A nova linguagem S) de 
Rick Becker e John Chambers. Então tomaram como base as idéias da linguagem S, 
que também era uma linguagem de computador voltada para cálculos estatísticos e 
produziram sua própria linguagem de computador para dar suas aulas de 
estatísticas. Assim surgiu o R, que provêm em parte das iniciais de seus 
criadores e também uma brincadeira com a linguagem S. R é similar a S e muitos 
dos códigos escritos para S rodam inalterados em R. O código fonte de R está 
disponível sob a licença GNU/GPL e as versões binárias pré-compiladas são 
fornecidas para Windows, Macintosh, e muitos sistemas operacionais Unix/Linux.
\begin{center} 
\includegraphics[width=0.2\textwidth]{Rlogo.png} 
\end{center}
R disponibiliza uma ampla variedade de técnicas estatísticas e gráficas, 
incluindo modelação linear e não linear, testes estatísticos clássicos, análise 
de séries temporais (time-series analysis), classificação, agrupamento entre 
muitas outras. É considerada uma linguagem facilmente extensível por causa do 
grande número de funções e extensões disponibilizadas pela comunidade, que 
também é reconhecida por seus vários pacotes. \\[2mm]
Muitas das funções padrão de R são escritas no próprio R, o que torna fácil aos 
usuários seguir escolhas algorítmicas feitas. Para tarefas computacionais 
intensivas, códigos C, C++, Java e Fortran também podem ser ligados e chamados 
durante a execução. Usuários experientes podem escrever código C ou Java para 
manipular diretamente objetos R. \\[2mm]
Como muitas outras linguagens, R suporta matrizes aritméticas. Sua estrutura 
de dados inclui escalares, vetores, matrizes, quadros de dados (similares a 
tabelas numa base de dados relacional) e listas. Seu sistema de objetos é 
extensível e inclui, entre outros, modelos de regressão, séries temporais e 
coordenadas geoespaciais. \\[2mm]
Resumidamente, R é uma linguagem de programação de computadores, que é usada 
para manipulação de dados estatísticos e gráficos. É amplamente utilizada entre 
os estatísticos e mineradores de dados para o desenvolvimento de software 
estatístico e análise de dados. O que torna a R tão útil e como explicar 
sua rápida aceitação? É que estatísticos, engenheiros e cientistas podem 
melhorar o código de software básico ou escrever variações para tarefas 
específicas. Pacotes escritos para a linguagem R acrescentam algoritmos 
avançados, técnicas de mineração para vasculhar bancos de dados e gráficos 
coloridos e texturizados. 

\subsection{Principais características}
As principais características dessa linguagem, são:
\begin{itemize}
  \item Totalmente Livre e Open Source. 
  \item Fornece acesso completo aos algoritmos e sua implementação. 
  \item Fornece um fórum que permite aos pesquisadores explorar e expandir os 
métodos utilizados para analisar dados.
  \item É o produto de trabalho de muitos especialistas nas áreas de 
estatística 
e análise de dados.
  \item Permite que Cientistas de todo o mundo possam ter acesso as ferramentas 
de software necessárias para realizar pesquisas.
  \item Promove uma investigação reproduzível (código criados como funções, 
podem ser reproduzidos) e fornece ferramentas abertas e acessíveis.
  \item As funções são escritas em R, e permite verificar facilmente o que as 
funções realmente fazem.
\end{itemize}
Como principais \textbf{vantagens}, podemos citar:
\begin{itemize}
  \item Rápida e gratuita com vários pacotes a disposição.
  \item Pesquisadores de estatística fornecem os seus métodos em pacotes de R.
  \item Oferece de análise estatística, para as mais variadas áreas do 
conhecimento, como economia, biologia, genética e ciências sociais.
  \item Comunidade de usuários ativos.
  \item Excelente para a simulação, programação e análises intensivas.
  \item Interfaces com software de armazenamento de banco de dados (SQL).
\end{itemize}
Como principais \textbf{desvantagens}, podemos citar:
\begin{itemize}
  \item Não existe um suporte comercial, porém conta-se com o apoio de uma 
comunidade crescente e vibrante.
  \item Grandes conjuntos de dados são limitados pela memória RAM.
  \item Fácil cometer erros se não conhecer bem a linguagem.
\end{itemize}

\subsection{Por que aprender R?}
R está se tornando a linguagem padrão para a \textbf{Ciência de Dados}. Isso 
não 
quer dizer que é a única linguagem ou a melhor ferramenta para todo tipo de
trabalho. É, no entanto, a mais amplamente utilizada e está aumentando em 
popularidade. \\[2mm]
A O’Reilly Media realizou uma pesquisa em 2014 para compreender quais são as 
ferramentas que os cientistas de dados estão usando atualmente. Descobriram que 
R é a linguagem de programação mais popular. Vários outros rankings de 
programação assinalam um crescente aumento da linguagem. \\[2mm]
Se é daqueles que gosta de visualizar o comportamento dos dados das mais 
variadas formas, e ainda sim, apresentar os resultados de forma impressionante, 
R é para você. Novos pacotes surgem a cada dia, como ``ggplot2'', que permite 
gráficos mais elaborados e profissionais. Além disso, pode-se facilmente 
exportar esses gráficos para anexar a um documento ou apresentação, sem perder 
a 
qualidade da imagem. \\[2mm]
Aprender uma linguagem de programação é semelhante a estudar um novo idioma, o 
ideal é dedicar um grande período em sua utilização. E a melhor forma de se 
familiarizar com seus comandos, um passo a passo bem simples é: ler um texto 
introdutório (como esta apostila) e ao mesmo tempo digitar os comandos no 
RStudio, observar os resultados crompreendendo como se comporta. R fornece uma 
plataforma inigualável para a programação de novos métodos estatísticos, de uma 
forma simples e fácil, sendo naturalmente extensível. 

\section{Instalação do R no Ubuntu 17.10}
R é compatível com diversos sistemas operacionais e pode ser facilmente 
instalada sem exigir muito conhecimento para isso. Nesta demostraremos como a 
instalação do R pode ser realizada no ambiente Ubuntu versão 17.10 através de 
duas formas:
\begin{itemize}
\item \textbf{Instalação via Docker}: Se deseja apenas conhecer o 
ambiente, executar alguns comandos e entender como o R se comporta, essa é a 
melhor forma. Uma única resalva: não é permitida a leitura de dados externos, 
como por exemplo arquivos CSV. 
\item \textbf{Instalação do Ambiente Completo}: Uma vez que já se está 
familizado com o ambiente e resolveu aderir a linguagem. Essa é a melhor 
maneira de obter a totalidade do que ela tem a oferecer.
\end{itemize}

\subsection{Modo 1: Via Docker}
O primeiro passo é ter o Docker instalado e configurado no ambiente, não 
trataremos disso nessa apostila, em seguida usar os seguintes comandos:
\begin{enumerate}
  \item Instalar e rodar a imagem: {\ttfamily\$ docker run -d -p 8787:8787 
rocker/rstudio}
  \item Para executar basta abrir um navegador e acessar o seguinte endereço: 
\url{http://localhost:8787}
\end{enumerate}
O usuário e a senha são: rstudio.

\subsection{Modo 2: Via Instalação do Ambiente completo}
Para instalar o ambiente completo devemos seguir os seguintes passos: \\[1mm]
{\ttfamily\$ sudo apt-get install r-base-core} \\[2mm]
Este passo instalará o ambiente R em seu computador, para ter o editor RStudio 
no site oficial do RStudio \cite{rstudiooficial} baixe a imagem corrente do 
RStudio Desktop Open Source License e digite o seguinte comando: \\[1mm]
{\ttfamily\$ sudo dpkg -i rstudio-(versaoatual).deb}

\section{Ambiente RStudio}
O ambiente do RStudio é composto de 4 áreas:
\begin{center} 
\includegraphics[width=0.8\textwidth]{RStudio.png} 
\end{center}
A primeira (no canto superior a esquerda) é a janela de Script (pode ser aberta 
digitando Ctrl+Shift+N) é aonde podemos armazenar comandos para executá-los e 
guardá-los para referencias futuras. Para executar um comando, na linha deste 
pressionar CTRL+Enter. \\[2mm]
A segunda (no canto inferior a esquerda) está a janela de comandos (ou console) 
aqui podemos digitar um comando separadamente bem como acessar o terminal. 
\\[2mm]
A terceira (no canto superior a direita) está localizada principalmente a 
janela de ambiente (Environment) é onde fica exposta todas as variáveis criadas 
ou bases de dados. A aba History contém um histórico de todos os comandos que 
foram executados no ambiente, e a aba Connections todas as conexões 
estabelecidas com diversas bases de dados. \\[2mm]
E a quarta (no canto inferior a direita) nos permite acesso principalmente as 
telas de auxílio (abas Help e Viewer), aos pacotes (aba Packages), aos gráficos 
criados (aba Plots) e aos arquivos do diretório corrente. Observe que qualquer 
ação executada nessas abas vai parar na janela de comandos. Se por exemplo, na 
aba de pacotes solicitamos a instalação de um novo pacote ou na aba de arquivos 
removemos ou renomeamos um arquivo o comando respectivo é mostrado e executado 
na console. \\[2mm]
Deste ponto para baixo, todos os comandos mostrados podem ser digitados na tela 
de script (lembrando que para executá-lo é necessario pressionar Ctrl+Enter) ou 
diretamente na janela de comandos (salvo qualquer outra observação). O 
principal comando de todo iniciante é {\ttfamily help.start()} onde na tela de 
ajuda será mostrado diversos manuais, referencias e materiais sobre a linguagem.

\subsection{Pacotes}
Os pacotes complementam as funções da linguagem e agregam mais poder ao R. Para 
instalar um pacote: \\[1mm]
{\ttfamily install-package("nome")} \\[2mm]
Por exemplo, um pacote muito comum a ser instalado é o dbplyr (usaremos este 
como referência para os próximos comandos), então executar o seguinte comando: 
\\[1mm]
{\ttfamily install-package("dbplyr")} \\[2mm]
Para obter uma ajuda sobre este pacote: \\[1mm]
{\ttfamily library(help = "dbplyr")} \\[2mm]
Para usar um pacote instalado: \\[1mm]
{\ttfamily library("dbplyr")}

\subsection{Chaining do pacote DPLYR}
R tem suas particularidades como linguagem, uma delas é Chaining (algo como 
encadeamento) contido no pacote DPLYR, e funciona algo como encadeamento de 
métodos de outras linguagens. Observe o seguinte exemplo:
\begin{lstlisting}
x1 <- 1:5; x2 <- 2:6
sqrt(sum((x1-x2)^2))
\end{lstlisting}
E usando Chaining, podemos reescrever a última linha da seguinte forma:
\begin{lstlisting}
x1 <- 1:5; x2 <- 2:6
(x1-x2)^2 %>% sum() %>% sqrt()
\end{lstlisting}
O resultado da primeira expressão é passado para a segunda, e o resultado desta
passado para a terceira. Obviamente que para funcionar o pacote ``dplyr'' deve 
estar habilitado: \\[1mm]
{\ttfamily library("dplyr")}

\section{Básico da Linguagem}
Nesta primeira seção vamos entender como o R funciona, ver algumas funções e 
diversos exemplos práticos.

\subsection{Tipos de Dados}
R trabalha com 5 tipos de dados (em R o comando de atribuição é {\ttfamily 
<-}):
\begin{itemize}
\item \textbf{Numérico - numeric}: São números com a forma decimal: 
{\ttfamily a <- 1.6} Obs. Não confunda, mesmo que a variavel recebesse o valor 
1, continuaria sendo numérica, para verificar o tipo de dado executar o 
comando: {\ttfamily class(a)}, como também podemos perguntar se determinada 
variável é de determinado tipo: {\ttfamily is.numeric(a)}
\item \textbf{Inteiro - integer}: São números sem a parte fracionária: 
{\ttfamily b <- 1L} Obs. Verifique na janela Environment que b 
está com o valor 1L, outra forma de definir uma inteira é por conversão, i.e 
{\ttfamily b <- as.integer(a)} e teremos o mesmo resultado
\item \textbf{Caractere - character}: São letras ou números: {\ttfamily c <- 
'12ABC'} Obs. Não é possível realizar operações aritméticas com este tipo de 
variável e não existe a distinção entre aspas duplas ou simples, qualquer uma 
pode ser utilizada
\item \textbf{Fator - factor}: é um tipo especial de vetor que nos permite 
plotar os dados: {\ttfamily d <- factor(c("Masculino", "Feminino", 
"Masculino"))} Obs. Neste fator temos 2 ocorrências (ou níveis), isso pode ser 
verificado com os seguintes comandos: {\ttfamily levels(d)} ou {\ttfamily 
nlevels(d)} sendo que o primeiro mostra as ocorrências e o segundo a quantidade
\item \textbf{Lógica - logical}: Podem ser de 2 tipos TRUE ou FALSE: 
{\ttfamily e <- TRUE} Obs. Lembre-se que a linguagem é case-sensitive, 
ou seja, diferencia maiúsculas de minúsculas
\end{itemize}
Workspace (aba Environment) é o lugar em R que as variáveis são armazenadas, 
para ver uma lista das variáveis armazenadas no Workspace: \\[1mm]
{\ttfamily ls()} \\[2mm]
Para eliminar uma variável da Workspace: \\[1mm]
{\ttfamily rm(nomeVariavel)} \\[2mm]
Para apagar completamente a Workspace: \\[1mm]
{\ttfamily rm(list = ls())} \\[2mm]
Existem também outros tipos usados em R que são chamados de Atomic Types 
(tipos atômicos), são eles:
\begin{itemize}
\item \textbf{double}: São números com alta precisão
\item \textbf{complex}: São números complexos em notação científica
\item \textbf{raw}: Armazena os bytes correspondente ao valor da variável
\end{itemize}
Por coerção podemos criar facilmente esses tipos, observe o código a seguir:
\begin{lstlisting}
a <- 25.456        # cria 'a' como numeric
b <- as.double(a)  # cria 'b' como double
c <- as.complex(a) # cria 'c' como complex
d <- as.raw(a)     # cria 'd' como raw
\end{lstlisting}

\subsection{Contas Matemáticas}
R aceita as quatro operações básicas com a utilização dos operadores comuns. E 
alguns operadores especiais:
\begin{itemize}
\item \textbf{\%/\%}: Divisão de dois números com o resultado inteiro
\item \textbf{\%\%}: Resto da divisão de dois números
\item \textbf{\^}: Exponenciação
\end{itemize}


\subsection{Vetores}
Um vetor (vector) em R é uma combinação de elementos de mesmo tipo, para 
criá-los usamos: \\[1mm]
{\ttfamily c("coração", "espada", "copas", "paus")} \\[2mm]
Ou podemos guardar esse vetor em uma variável: \\[1mm]
{\ttfamily tc <- c("coração", "espada", "copas", "paus")} \\[2mm]
Para trazer o valor de um elemento, utilizamos seu índice entre colchetes. O 
primeiro elemento possui o índice 1 e assim sucessivamente: \\[1mm]
{\ttfamily tc[2]} \\[2mm]
Trará o valor do segundo elemento ou seja ``espada''. Para obter dois 
elementos usamos o operador de intervalo: \\[1mm]
{\ttfamily tc[2:4]} \\[2mm]
Usamos a função ``paste'' para juntar valores caracteres: \\[1mm]
{\ttfamily paste("Tipo de carta:", tc[1:4])} \\[2mm]
Para obter o tamanho de um vetor: \\[1mm]
{\ttfamily length(tc)} \\[2mm]
Outra forma de se criar um vetor seria através de um intervalo, por exemplo, 
para definir um vetor cartas com 13 elementos de 1 a 13: \\[1mm]
{\ttfamily vc <- c(1:13)} \\[2mm]
Outro detalhe interessante com vetores é que podemos proceder operações em 
conjunto, veja esses exemplos:
\begin{lstlisting}
vc <- vc + 2          # Somar um valor a todos os elementos
vc <- vc + 2:4        # Somar uma sequencia repetidamente nos elementos
vc <- vc * 2          # Multiplicar um valor por todos os elementos
vc <- vc / 2          # Dividir um valor por todos os elementos
vc <- vc[-c(5,6)]     # Remover os elementos em determinadas posicoes
vc[1] <- 5            # Trocar o valor do primeiro elemento
vc[1:4] <- 5          # Trocar o valor em determinadas posicoes
vc[length(vc)+1] <- 8 # Adicionar um valor ao final do vetor 
vc <- sort(vc)        # Reordenar o vetor
vc[which(vc > 7)]     # Mostrar valores por uma condicao determinada
rm(vc)                # remover o vetor
\end{lstlisting}
Podemos também nomear cada um dos elementos de um vetor, por 
exemplo, para 
definir o período percorrido em corridas realizadas a cada dia da semana:
\begin{lstlisting}
dias <- c("Seg", "Ter", "Qua", "Qui", "Sex", "Sab", "Dom")
kms <- c(1.5, 2.3, 2.3, 3.2, 2.2, 1.8, 1.2)
names(kms) <- dias
kms # mostra o resultado do vetor com seus labels definidos

# Outra forma mais simples, com o mesmo resultado, seria:
kms <- c(Seg = 1.5, Ter = 2.3, Qua = 2.3, Qui = 3.2, 
         Sex = 2.2, Sab = 1.8, Dom = 1.2)
         
# Para trazer o valor de um elemento:
kms[2]      # valor do segundo elemento
kms["Ter"]  # ou pelo seu nome
\end{lstlisting}
Observe que na segunda forma as aspas são totalmente opcionais. Vejamos mais 
algumas funções para vetores:
\begin{lstlisting}
head(vet)   # Mostra os dados iniciais do vetor
tail(vet)   # Mostra os dados finais do vetor
\end{lstlisting}

\subsection{Análise de dados com Vetores}
Para obtermos informações sobre o vetor, utilizamos a seguinte função: \\[1mm]
{\ttfamily str(nomeVetor)} \\[2mm]
Porém, para analisarmos seus dados é ideal conhecer algumas funções básicas de 
estatística e aritmética:
\begin{lstlisting}
sum(kms)           # Soma dos Kms percorridos na semana
sort(kms)          # Ordenar os Kms percorridos na semana
mean(kms)          # Media dos Kms percorridos na semana
max(kms)           # Maior Km percorrido
min(kms)           # Menor Km percorrido
median(kms)        # Media ponderada dos Kms percorridos na semana
sd(kms)            # Desvio padrao
log(kms)           # Logaritmo de cada Km
dnorm(kms)         # Probabilidade da densidade da distribuicao normal
pnorm(kms)         # Integral para -infinito da distribuicao normal
rnorm(kms)         # Vetor da distribuicao de numeros randomicos
dlnorm(kms)        # Logaritmo da distribuicao normal de cada Km
sqrt(kms)          # Raiz Quadrada de cada Km
quantile(kms)      # Quantil, dividos em pontos de 25%
quantile(kms, .25) # Primeiro Quartil ou quartil inferior
quantile(kms, .50) # Segundo Quartil (ou a mediana)
quantile(kms, .75) # Terceiro Quartil ou quartil superior
quantile(kms, 1)   # Quarto Quartil (ou a maxima)
summary(kms)       # Resumo dos dados do vetor
\end{lstlisting}
Para explicar melhor, vamos ver o real poder do R e traduzir algumas dessas 
informações em formato gráfico:
\begin{lstlisting}
par(mfrow = c(1,2)) # Separa a area grafica em 2 partes
boxplot(kms)        # Cria um grafico do resumo dos dados (summary)
# So isso... Entendendo o que significa cada separacao...
abline(h = min(kms), col = "Blue")
abline(h = max(kms), col = "Yellow")
abline(h = median(kms), col = "Green")
abline(h = quantile(kms, c(0.25, 0.75)), col = "Red")
\end{lstlisting}
E o resultado será este:
\begin{center} 
\includegraphics[width=0.3\textwidth]{grafico01.png} 
\end{center}
Essa caixa no meio do gráfico, formada pelos 1º e 3º quartis, em estatística 
é conhecida por ``Intervalo interquartil''. Dados fora dessa caixa podem ser 
considerados discrepantes, por exemplo o máximo Km percorrido foi 3,2 porém 
ocorreu somente uma vez, assim como o menor Km percorrido foi 1,2. Se 
repararmos os dados, os valores medianos estão entre 1,65 e 2,30 que 
correspondem exatamente a esse intervalo. \\[2mm]
A função ``Quantil'' (quantile()) nos permite analisar outros dados 
interessantes. O primeiro seria dividir os valores em 10 partes (com intervalos 
de 10\%), isso é chamado de ``decil'' (que é qualquer valor da divisão de uma 
variável em 10 partes iguais), para isso: \\[1mm]
{\ttfamily quantile(kms, prob = seq(0, 1, length = 11), type = 5)} \\[2mm]
E com esse conhecimento, podemos localizar qualquer ``percentil'' que 
desejarmos, um percentil é uma medida estatística que divide uma amostra em 100 
partes, cada uma com uma percentagem de dados é aproximadamente igual. Por 
exemplo, para acharmos o 32º, 57º e 98º percentil na nossa corrida semanal, 
podemos usar: \\[1mm]
{\ttfamily quantile(kms, prob = c(.32, .57, .98))} \\[2mm]
Outro gráfico muito simples de ser realizado é a plotagem: \\[1mm]
{\ttfamily plot(kms)} \\[2mm]
E o resultado será este:
\begin{center} 
\includegraphics[width=0.4\textwidth]{grafico03.png} 
\end{center}
Porém um histogram é bem mais interessante para a Análise de Dados: \\[1mm]
{\ttfamily hist(kms)} \\[2mm]
E o resultado será este:
\begin{center} 
\includegraphics[width=0.6\textwidth]{grafico02.png} 
\end{center}
Um histograma mostra os dados de forma agrupada por intervalos regulares, neste 
caso observamos que entre 1 Km e 1,5 Km a frequencia foi de 2 vezes (ocorreu no 
Domingo e na Segunda), entre 1,5 Km e 2 Km a frequencia foi 1 vez (ocorreu no 
Sábado) e assim se procede sua leitura. \\[2mm]
Por fim podemos usar o ``Normal-Quantile Plots'' para traçar um gráfico com a 
distribuição padrão normal dos nossos dados e verificar qual nossa média real 
de Kms percorridos na corrida:
{\ttfamily qqnorm(kms)} \\[2mm]
E o resultado será este:
\begin{center} 
\includegraphics[width=0.5\textwidth]{grafico04.png} 
\end{center}
Observe no padrão linear deste gráfico que a maior concentração de pontos fica 
entre 1,5 Km e 2,5 Km .

\subsection{Limpando Vetores}
O maior trabalho do ``Analista de Dados'' é o de organizar as amostras para que 
os dados fiquem coerentes. O primeiro caso é no qual os vetores podem conter 
(devido a diversas operações realizadas) valores ``não é valor'', em R são 
reconhecidos por \textbf{NA}, veja a seguinte simulação:
\begin{lstlisting}
a <- c(1:10) # criar um vetor A com 10 elementos
a[2] <- NA   # atribuir para o elemento 2 o valor NA
a[6] <- NA   # atribuir para o elemento 6 o valor NA
\end{lstlisting}
Obviamente isto é apenas um exemplo, sendo que o vetor ``a'' contém os 
seguintes valores: \\[1mm]
{\ttfamily 1 NA  3  4  5 NA  7  8  9 10} \\[2mm]
Sendo impossível aplicar as funções vistas neste vetor. Para limpá-lo podemos 
utilizar o seguinte comando: \\[1mm]
{\ttfamily a <- na.omit(a)} \\[2mm]
E todos os valores NA serão retirados. Outra forma que fará o mesmo efeito é: 
\\[1mm]
{\ttfamily a <- a[!is.na(a)]} \\[2mm]
E podemos verificar da seguinte forma: \\[1mm]
{\ttfamily any(is.na(a))} \\[2mm]
E será retornado FALSE, indicando que a nossa amostra está coerente. A segunda 
forma é bem interessante, imaginemos agora o seguinte vetor: \\[1mm]
{\ttfamily numFilhos <- c(5, 2, -3, 1, 0, -4)} \\[2mm]
Desejamos remover todos os valores negativos deste vetor, que apresentam erros 
na amostragem. Para proceder isso fazemos: \\[1mm]
{\ttfamily numFilhos <- numFilhos[numFilhos > 0]} \\[2mm]
Operações básicas de lógica em R:
\begin{lstlisting}
any(logical)   # Retorna TRUE ou FALSE dependendo da analise logica
is.[tipo](var) # Se a variavel eh de determinado tipo
>              # Maior que
<              # Menor que
>=             # Maior ou igual a
<=             # Menor ou igual a
==             # Igual a
!=             # Nao igual a
\end{lstlisting}

\subsection{Números Aleatórios}
Para gerar uma sequencia de 10 números aleatórios: \\[1mm]
{\ttfamily runif(10)} \\[2mm]
Se deseja limitar os valores mínimo e máximo: \\[1mm]
{\ttfamily runif(10, min = 5, max = 50)} \\[2mm]
Para definir a quantidade de casas decimais: \\[1mm]
{\ttfamily options(digits = 2)} \\[2mm]
Para gerar um vetor de 10 letras aleatórias: \\[1mm]
{\ttfamily letters[round(runif(10, min = 1, max = 27))]} \\[2mm]
E em maiúsculas: \\[1mm]
{\ttfamily LETTERS[round(runif(10, min = 1, max = 27))]} \\[2mm]
Resumo das Funções:
\begin{lstlisting}
runif(n, max, min) # Gera numeros aleatorios
options()          # Define diversas saidas
round(n)           # Arredonda para o mais proximo inteiro
letters ou LETTERS # Vetor com as letras do alfabeto minusculas e maiusculas
\end{lstlisting}

\section{Pacote DPLYR}
Na subseção de Chaining foi mostrado um dos comandos do pacote DPLYR, vamos nos 
aprofundar mais nele para entender melhor seu funcionamento. Basicamente serve 
como substituição de muitas funções de acesso a bases de dados DATASETs. Para 
executar os exemplos dessa seção instale o DataSet ``hflights'': \\[1mm]
{\ttfamily install.packages(c("hflights", "Lahman"))} \\[2mm]
Para usar ambos pacotes: \\[1mm]
{\ttfamily library(dplyr)} \\[1mm]
{\ttfamily library(hflights)} \\[2mm]
E utilizar o DataSet de Voos: \\[1mm]
{\ttfamily voos <- tibble::as.tibble(hflights)} \\[2mm]
Para visualizar a estrutura de um objeto, normalmente usaríamos ``str(voos)'', 
porém com o pacote ``dplyr'' ativo, pode-se usar: \\[1mm]
{\ttfamily glimpse(voos)}

\subsection{Seleções}
Selecionar determinadas colunas: \\[1mm]
{\ttfamily select(voos, DepTime, ArrTime, FlightNum)} \\[2mm]
Selecionar determinadas colunas, por um vetor:
\begin{lstlisting}
cols <- c("Year", "Month", "DayofMonth")
voos %>% 
  select(one_of(cols))
\end{lstlisting}
Selecionar determinadas colunas que contenham tal expressão: \\[1mm]
{\ttfamily select(voos, Year:DayofMonth, contains("Taxi"), contains("Delay"))} 
\\[2mm]
Seleção distinta, sem repetições:
\begin{lstlisting}
voos %>% 
  select(Year, Month) %>% 
  distinct()
\end{lstlisting}
Aleatoriamente, trazer uma amostra de X linhas:
\begin{lstlisting}
voos %>% 
  sample_n(5)
\end{lstlisting}
Aleatoriamente, trazer uma amostra de uma fração linhas:
\begin{lstlisting}
voos %>% 
  sample_frac(0.08, replace = TRUE)
\end{lstlisting}
Ver somente os campos numéricos:
\begin{lstlisting}
voos %>% 
  summarise_if(is.numeric, mean, na.rm = TRUE)
\end{lstlisting}
Três exemplo de todas as colunas, menos algumas:
\begin{lstlisting}
voos %>% select(-Month, -DayofMonth)        # determinadas
voos %>% select(-(UniqueCarrier:Cancelled)) # intervalo
voos %>% select(-contains("time"))          # contem determinado termo 
\end{lstlisting}
Renomear colunas:
\begin{lstlisting}
# Somente as renomeadas aparecem
voos %>% 
  select(Origem = Origin, Destino = Dest, Distancia = Distance)
# Todas as colunas aparecem, inclusive as renomeadas
voos %>% 
  rename(Origem = Origin, Destino = Dest, Distancia = Distance)
\end{lstlisting}

\subsection{Filtragens}
Para trazer todos os Voos de um determinado Mês E Ano: \\[1mm]
{\ttfamily filter(voos, Month == 1 \& DayofMonth==1)} \\[2mm]
Para trazer todos os Voos de determinados Transportadores: \\[1mm]
{\ttfamily filter(voos, UniqueCarrier == 'AA' | UniqueCarrier == 'UA')} \\[2mm]
Também pode-se utilizar: \\[1mm]
{\ttfamily filter(voos, UniqueCarrier \%in\% c('AA','UA'))} \\[2mm]
Mesclando SELEÇÃO e FILTRO:
\begin{lstlisting}
voos %>%
  select(UniqueCarrier, DepDelay) %>%
  filter(DepDelay > 60)
\end{lstlisting}
Mesclando SELEÇÃO e FILTRO:
\begin{lstlisting}
voos %>% 
  filter(DepTime >= 600, DepTime <= 605)
voos %>% 
  filter(between(DepTime, 600, 605))
voos %>% 
  filter(!is.na(DepTime))
\end{lstlisting}
Fatiando:
\begin{lstlisting}
voos %>% 
  slice(1000:1005)
voos %>% 
  filter(!is.na(DepTime)) %>% slice(1000:1005)
\end{lstlisting}

\subsection{Agrupamentos}
Por destino, calcular a média de voos:
\begin{lstlisting}
voos %>%
  group_by(Dest) %>%
  summarise_all(mean, na.rm = TRUE)
\end{lstlisting}
Por destino, calcular a média de voos atrasados:
\begin{lstlisting}
voos %>%
  group_by(Dest) %>%
  summarise_at(vars(c("ArrDelay")), mean, na.rm = TRUE)
\end{lstlisting}
Por transporte, contar a porcentagem de voos cancelados ou desviados:
\begin{lstlisting}
voos %>%
  group_by(UniqueCarrier) %>%
  summarise_at(vars(c("Cancelled","Diverted")), mean, na.rm = TRUE)
\end{lstlisting}
Por transporte, contar o mínimo ou máximo, de chegadas ou partidas, atrasadas:
\begin{lstlisting}
voos %>%
  group_by(UniqueCarrier) %>%
  summarise_at(vars(matches("Delay")), funs(min, max), na.rm = TRUE)
\end{lstlisting}
Por dia, contar o total de voos (ordenados descendentemente):
\begin{lstlisting}
voos %>%
  group_by(Month, DayofMonth) %>%
  tally(sort = TRUE)
\end{lstlisting}
Por destino, contar o total de voos e o número de aeronaves (sem repetição):
\begin{lstlisting}
voos %>%
  group_by(Dest) %>%
  summarise(FlightCount = n(), PlaneCount = n_distinct(TailNum))
\end{lstlisting}
Três de cada grupo (Ordenado pelo Horário da Partida)
\begin{lstlisting}
voos %>% 
  group_by(Month, DayofMonth) %>% 
  top_n(3, DepTime) 
\end{lstlisting}
Três de cada grupo (Ordenado pelo Horário da Partida descendentemente)
\begin{lstlisting}
voos %>% 
  group_by(Month, DayofMonth) %>% 
  top_n(3, DepTime) %>% 
  arrange(Month, DayofMonth, desc(DepTime))
\end{lstlisting}
Por destino, contar o total de cancelados e não cancelados:
\begin{lstlisting}
voos %>%
  group_by(Dest) %>%
  select(Cancelled) %>%
  table() %>%
  head()
\end{lstlisting}
Fatiando:
\begin{lstlisting}
# 3 primeiras de cada Grupo
voos %>% 
  group_by(Month, DayofMonth) %>% 
  slice(1:3)
# 3 de cada grupo (aleatoriamente)
voos %>% 
  group_by(Month, DayofMonth) %>% 
  sample_n(3)
\end{lstlisting}

\subsection{Agregações}
Para cada transporte, calcular a cada dois dias, a partida mais atrasada:
\begin{lstlisting}
voos %>%
  group_by(UniqueCarrier) %>%
  select(Month, DayofMonth, DepDelay) %>%
  top_n(2) %>%
  arrange(UniqueCarrier, desc(DepDelay))
\end{lstlisting}
Para cada mês, o total de voos e as mudanças do mês anterior:
\begin{lstlisting}
voos %>%
  group_by(Month) %>%
  tally() %>%
  mutate(change = n - lag(n))
\end{lstlisting}

\subsection{Mutações e Transmutações}
São novos campos que não existem no DataSet original. Podemos utilizá-los sem 
modificar o DataSet, da seguinte forma:
\begin{lstlisting}
voos %>%
  select(Distance, AirTime) %>%
  mutate(Velocidade = Distance / AirTime*60)
\end{lstlisting}
Ou modificando o DataSet, da seguinte forma:
\begin{lstlisting}
voos <- voos %>% 
  mutate(Velocidade = Distance / AirTime*60)
select(voos, Distance, Velocidade)
\end{lstlisting}
Na ``Transmutação'' apenas a coluna criada aparecerá:
\begin{lstlisting}
voos %>% 
  transmute(Velocidade = Distance / AirTime * 60)
\end{lstlisting}

\section{Conclusão}
O objetivo desta apostila foi o de mostrar como iniciar seus estudos na 
Linguagem R é não de ensinar estatística. Foi planejada para ser usada durante 
disciplinas com o uso da linguagem R (principalmente para pessoas que nunca 
usaram o R), mas isso não impede que seja utilizada em diversas fases de seus 
estudos. \\[2mm]
A maioria dos pacotes tem por objetivo análises estatísticas, porém 
praticamente 
qualquer aplicativo que exista pode ser portado para R. Apesar de R ser usada, 
primariamente, para análises estatísticas, é uma linguagem de programação 
completa, capaz de realizar qualquer tarefa que outras linguagens realizam. A 
evolução e amadurecimento do R, tem levado grandes empresas como Oracle e 
Microsoft, a investirem seus bilionários recursos em pesquisa e desenvolvimento 
para aprimorar suas soluções analíticas utilizando o R como base. A linguagem R 
vem se tornando ainda o principal ``idioma'' de Cientistas e Analistas de Dados 
e está liderando a revolução proporcionada pelo Big Data Analytics. \\[2mm]
R é uma das linguagens de computador que mais cresce no mundo. Parte devido ao 
crescente comunidade de usuários que contribui com pacotes, que são conjuntos de 
pequenos programas que expandem suas funcionalidades. No Brasil, contamos 
com espelhos na USP, UFPR e fundação Oswaldo Cruz. ``R é uma demonstração 
real do poder da colaboração, e não creio que fosse possível criar algo parecido 
de qualquer outra maneira'', disse Ihaka. ``Se tivéssemos escolhido lançar o 
software como produto comercial, teríamos vendido cinco cópias''. Sou um 
entusiasta do mundo Open Source e novas tecnologias, veja outros artigos que 
publico sobre tecnologia acessando meu Blog Oficial \cite{fernandoanselmo}.

%-----------------------------------------------------------------------------
% REFERÊNCIAS
%-----------------------------------------------------------------------------

\begin{thebibliography}{2}

  \bibitem{cranoficial} 
  Página do CRAN \\
  \url{http://cran.r-project.org/}
  
  \bibitem{rstudiooficial} 
  Página do RStudio \\
  \url{https://www.rstudio.com/}
  
  \bibitem{fernandoanselmo} 
  Fernando Anselmo - Blog Oficial de Tecnologia \\
  \url{http://www.fernandoanselmo.blogspot.com.br/}

\end{thebibliography}
  
\end{document}
